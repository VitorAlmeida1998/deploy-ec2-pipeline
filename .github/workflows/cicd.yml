name: CI/CD to EC2 (Docker + GHCR)

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # üîê Login no Docker Hub (para baixar a imagem base sem rate limit)
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # üîê Login no GHCR (para fazer push da imagem)
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy via SSH - pull and restart container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            IMAGE="${{ secrets.IMAGE_NAME }}"
            TAG="sha-${{ github.sha }}"
            PORT=80
            NAME="deploy-ec2-pipeline"

            # login no GHCR se o pacote for privado
            if [ -n "${GHCR_USER:-}" ] && [ -n "${GHCR_PAT:-}" ]; then
              echo "${GHCR_PAT}" | sudo docker login ghcr.io -u "${GHCR_USER}" --password-stdin
            fi

            sudo docker pull "${IMAGE}:${TAG}" || sudo docker pull "${IMAGE}:latest"
            (sudo docker rm -f "$NAME" || true)
            sudo docker run -d --name "$NAME" -p ${PORT}:3000 --restart=always "${IMAGE}:${TAG}" \
              || sudo docker run -d --name "$NAME" -p ${PORT}:3000 --restart=always "${IMAGE}:latest"
            sudo docker image prune -af || true
        env:
          GHCR_USER: ${{ secrets.GHCR_USERNAME }}
          GHCR_PAT: ${{ secrets.GHCR_TOKEN }}
